# Fuse Setup CLI Script
connect

# If exists remove system property  sun.security.krb5.debug
if (outcome == success) of /system-property=sun.security.krb5.debug:read-resource
	/system-property=sun.security.krb5.debug:remove
end-if

# If exists remove system property java.security.krb5.conf
if (outcome == success) of /system-property=java.security.krb5.conf:read-attribute(name=value)
	/system-property=java.security.krb5.conf:undefine-attribute(name=value)
	/system-property=java.security.krb5.conf:remove
end-if

# Configuring the system properties:
# Note: /etc/krb5.conf is the default location of the kerberos configuration file.
/system-property=sun.security.krb5.debug:add(value="true")
/system-property=java.security.krb5.conf:add(value="/etc/krb5.conf")

# If exists remove Data source
if (outcome == success) of /subsystem=datasources/data-source=mssqlDS:read-resource
 /subsystem=datasources/data-source=mssqlDS:remove
end-if

# If exists remove Driver
if (outcome == success) of /subsystem=datasources/jdbc-driver={{ jboss_eap_database_driver_name }}:read-resource
	/subsystem=datasources/jdbc-driver={{ jboss_eap_database_driver_name }}:remove
end-if

# If exists remove Security Domain
if (outcome == success) of /subsystem=security/security-domain={{ jboss_eap_database_security_domain }}:read-resource
 /subsystem=security/security-domain={{ jboss_eap_database_security_domain }}:remove
end-if

# If exists remove security cache container
if (outcome == success) of /subsystem=infinispan/cache-container=security:read-attribute(name=default-cache)
	/subsystem=infinispan/cache-container=security:undefine-attribute(name=default-cache)
	/subsystem=infinispan/cache-container=security:remove
end-if

# Configuring Infinispan cache.
/subsystem=infinispan/cache-container=security:add(default-cache=auth-cache)
/subsystem=infinispan/cache-container=security/local-cache=KerberosDatabase:add()
/subsystem=infinispan/cache-container=security/local-cache=KerberosDatabase/expiration=EXPIRATION:add(lifespan=3540000,max-idle=3540000)
/subsystem=infinispan/cache-container=security/local-cache=KerberosDatabase/eviction=EVICTION:add(strategy=LRU, max-entries=1000)


# Configuring the Security domain.
# Note: The Parameters below SHOULD have their Values wrapped in Quotes
/subsystem=security/security-domain={{ jboss_eap_database_security_domain }}:add(cache-type=infinispan)
/subsystem=security/security-domain={{ jboss_eap_database_security_domain }}/authentication=classic:add
/subsystem=security/security-domain={{ jboss_eap_database_security_domain }}/authentication=classic/login-module="Kerberos-Module":add(code="org.jboss.security.negotiation.KerberosLoginModule", module="org.jboss.security.negotiation", flag=required, module-options={"storeKey" => "false", "useKeyTab" => "true", "doNotPrompt" => "true", "debug" => "{{ jboss_eap_kerberos_debug }}", "keyTab" => "{{ jboss_eap_keytab_dir }}/{{ jboss_eap_keytab_filename }}", "principal" => "HTTP/{{ ansible_fqdn | lower }}@{{ ansible_domain | upper }}","refreshKrb5Config" => "true", "isInitiator" => "true", "addGSSCredential" => "true", "wrapGSSCredential" => "true", "credentialLifetime" => "-1"})

# Configuring Driver
/subsystem=datasources/jdbc-driver={{ jboss_eap_database_driver_name }}:add(driver-module-name="com.microsoft.sqlserver",driver-xa-datasource-class-name=com.microsoft.sqlserver.jdbc.SQLServerXADataSource,driver-name={{ jboss_eap_database_driver_name }})

# Configuring Data source
# Note: The Parameters below SHOULD NOT have their Values wrapped in Quotes
/subsystem=datasources/data-source=mssqlDS:add(jndi-name="java:jboss/datasources/mssqlDS",use-ccm=true,connection-url="jdbc:sqlserver://{{ jboss_eap_database_host }}:{{ jboss_eap_database_port }};DatabaseName={{ jboss_eap_database_name }};integratedSecurity=true;authenticationScheme=JavaKerberos",driver-name="{{ jboss_eap_database_driver_name }}",security-domain="{{ jboss_eap_database_security_domain }}",pool-prefill=true,min-pool-size=20,max-pool-size=300,flush-strategy="FailingConnectionOnly",pool-use-strict-min=true,valid-connection-checker-class-name="org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker",validate-on-match=true,background-validation=true,background-validation-millis=60000,exception-sorter-class-name=org.jboss.resource.adapter.jdbc.vendor.NullExceptionSorter)
/subsystem=datasources/data-source=mssqlDS:write-attribute(name=blocking-timeout-wait-millis,value=30000)
/subsystem=datasources/data-source=mssqlDS:write-attribute(name=statistics-enabled,value=true)
/subsystem=datasources/data-source=mssqlDS/connection-properties=sendStringParametersAsUnicode:add(value=true)
/subsystem=datasources/data-source=mssqlDS:enable


# If exists remove SSL
#if (outcome == success) of /subsystem=web/connector=HTTPS/:read-resource
#	/subsystem=web/connector=HTTPS/:remove
#end-if

# Setup SSL
if (outcome != success) of /subsystem=web/connector=HTTPS/:read-resource
	/subsystem=web/connector=HTTPS/:add(socket-binding=https,scheme=https,protocol=HTTP/1.1,secure=true)
end-if
if (outcome != success) of /subsystem=web/connector=HTTPS/ssl=configuration:read-resource
	/subsystem=web/connector=HTTPS/ssl=configuration:add(name=https,certificate-key-file="${jboss.server.config.dir}/{{ jboss_eap_ssl_keystore_name }}",password={{ jboss_eap_ssl_keystore_password }}, key-alias={{ jboss_eap_ssl_keystore_alias }})
end-if

# reload
:reload
